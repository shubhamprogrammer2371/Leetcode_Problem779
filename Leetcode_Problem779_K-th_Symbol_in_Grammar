int depthFirstSearch(int n, int k, int rootVal) {
    if (n == 1) 
        return rootVal;
    int totalNodes = pow(2, n - 1);    
    if (k > (totalNodes / 2)) // Target node will be present in the right half sub-tree of the current root node.
        return depthFirstSearch(n - 1, k - (totalNodes / 2), !(rootVal));
    else // Otherwise, the target node is in the left sub-tree of the current root node.
        return depthFirstSearch(n - 1, k, rootVal);
}
int kthGrammar(int n, int k) {
    return depthFirstSearch(n, k, 0);
}



------------------------------------------------------------------------------------------------------------------------------------------------------------------


int recursion(int n, int k) {    
    if (n == 1) // First row will only have one symbol '0'.
        return 0;
    int totalElements = pow(2, (n - 1)), halfElements = totalElements / 2;
    if (k > halfElements) // If the target is present in the right half, we switch to the respective left half symbol.
        return 1 - kthGrammar(n, k - halfElements);
    return recursion(n - 1, k); // Otherwise, we switch to the previous row.
}
int kthGrammar(int n, int k) {
    return recursion(n, k);
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int kthGrammar(int n, int k) {
    if(k == 1)  
        return 0;
    return (k % 2) ? kthGrammar(n-1, (k+1)/2) : !kthGrammar(n-1, k/2); // If k is odd, return previous val and If k is even, return previous val flipped                  
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int kthGrammar(int n, int k) {
    if (n == 1) 
        return 0;
    int symbol = 1;  // We assume the symbol at the target position is '1'.
    for (int currRow = n; currRow > 1; --currRow) 
    {
        int totalElements = pow(2, (currRow - 1)), halfElements = totalElements / 2;  
        if (k > halfElements) // If 'k' lies in the right half symbol, then we flip over to the respective left half symbol.
        {
            symbol = 1 - symbol; // Flip the symbol.
            k -= halfElements; // Change the position after flipping.
        }
    } 
    return !(symbol); // We reached the 1st row; if the symbol is not '0', we started with the wrong symbol. Thus, the start symbol was '0' not '1'. Start symbol was indeed what we started with, a '1'.
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int kthGrammar(int n, int k) {
    if (k == 1)
        return 0;
    else if (k == 2)
        return 1;        
    int multiple = 2;
    while (multiple * 2 < k) 
        multiple *= 2;
    k -= multiple; 
    return !(kthGrammar(n, k));
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int countBits (int n) {
    int answer = 0;
    while (n > 0) 
    {
        ++answer;
        n = n & (n - 1);
    }
    return answer;
}
int kthGrammar(int n, int k) {
    return (countBits (k - 1) % 2);
}
